(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{354:function(t,e,s){"use strict";s.r(e);var n=s(17),i=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"git学习涉及的英语单词"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git学习涉及的英语单词"}},[t._v("#")]),t._v(" git学习涉及的英语单词")]),t._v(" "),e("p",[t._v("refactor /ri'fæktə/ 重构")]),t._v(" "),e("p",[t._v("vim\n页面输入 :wq 退出该页面")]),t._v(" "),e("p",[t._v("这里第一种报错解决方法是先在那个页面输入:wq退出该页面，然后重新commit一下：git commit -m “这里是提交的说明信息”,然后git status 查看一下状态，没问题后就直接git push")]),t._v(" "),e("ol",[e("li",[t._v("git 本地项目关联远程项目, 并推送到远程新分支(推送时在远程新建立一个分支)\n1.1 在git bash 中或其他命令行中进入本地项目文件夹\n1.2 创建本地仓库\ngit init . # . 意思是当前目录，不能省略")])]),t._v(" "),e("p",[t._v("1.3 把本地项目提交到本地仓库：\n#先把当前路径下的所有文件添加到缓存\ngit add .")]),t._v(" "),e("p",[t._v('#提交缓存中的修改到本地仓库\ngit commit -m "提交信息日志记录什么写这里"')]),t._v(" "),e("p",[t._v("1.4 本地关联远程仓库\ngit remote add origin {远程仓库地址}\n1.5 推送或拉取远程仓库\n1.5.1 本地直接推送到远程仓库的一个新分支(相当于推送的同时在远程仓库创建了一个新分支)\ngit push origin {本地分支名,初始都是master}:{远程仓库的新分支名}\n举例如下:")]),t._v(" "),e("p",[t._v("git push origin master:dev-fya-jcq\n1\n但此时实际还未关联到远程相应分支, 可以使用语句:")]),t._v(" "),e("p",[t._v("git push --set-upstream origin {本地分支名}:{远程分支名}\n1\n这样以后push时直接推送到远程相应分支")]),t._v(" "),e("p",[t._v("查看本地分支与远程分支的关联关系:")]),t._v(" "),e("p",[t._v("git branch -vv\n1\n另外如果要删除远程分支,可以推送一个空分支到远程分支，其实就相当于删除远程分支：")]),t._v(" "),e("p",[t._v("git push origin :{远程分支名}\n1\n也可以使用：")]),t._v(" "),e("p",[t._v("git push origin --delete {远程分支名}\n1\n这两种方式都可以删除指定的远程分支")]),t._v(" "),e("p",[t._v("参考: git创建远程分支")]),t._v(" "),e("p",[t._v("1.5.2 从远程仓库拉取代码到本地（相当于更新）\ngit pull origin {远程分支名} --allow-unrelated-histories\n1\n后面加上 --allow-unrelated-histories ， 把两段不相干的 分支进行强行合并, 即允许合并不相干的代码")]),t._v(" "),e("p",[t._v("参考: Git本地项目关联到github上项目")]),t._v(" "),e("p",[t._v("1.5.3 本地分支与远程分支关联，并推送到远程仓库(远程已经存在一个分支)\ngit push --set-upstream origin master\n1\n参考: git 将本地项目和github项目关联")]),t._v(" "),e("p",[t._v("1.6 其他关于分支的操作\nGit本地分支和远程分支关联")]),t._v(" "),e("p",[t._v("打包后直接推送到github\nfatal: refusing to merge unrelated histories")]),t._v(" "),e("p",[t._v("bash\nhistory # 它会将所有使用过的命令都查出来")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" git fetch origin sit\n git fetch origin sit:sit\n git checkout sit\n git status\n git log\n history\n")])])]),e("p",[t._v("fatal: refusing to merge unrelated histories")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" Locker\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" Locker\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init \n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("touch")]),t._v(" README.md\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" README.md\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"first commit"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" origin https://gitee.com/xiaoxiang516/Locker.git\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-u")]),t._v(" origin "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"master"')]),t._v("\n\n已有仓库?\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" existing_git_repo\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" origin https://gitee.com/xiaoxiang516/Locker.git\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-u")]),t._v(" origin "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"master"')]),t._v("\n")])])]),e("h3",{attrs:{id:"注意事项"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[t._v("#")]),t._v(" 注意事项")]),t._v(" "),e("p",[t._v("通过，不能点击gitee上的初始化按钮，要是一个远程的空仓库，不能有任何文件，但是若初始化了，则会出现以下错误")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git push -u origin \"master\"\nerror: src refspec master does not match any\nerror: failed to push some refs to 'https://gitee.com/xiaoxiang516/Locker.git'\n\n\n$ git push -u origin \"master\"\nTo https://gitee.com/xiaoxiang516/Locker.git\n ! [rejected]        master -> master (fetch first)\nerror: failed to push some refs to 'https://gitee.com/xiaoxiang516/Locker.git'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n\n$ git push --set-upstream origin master\nTo https://gitee.com/xiaoxiang516/Locker.git\n ! [rejected]        master -> master (non-fast-forward)\nerror: failed to push some refs to 'https://gitee.com/xiaoxiang516/Locker.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes (e.g.\nhint: 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n\n")])])]),e("p",[e("a",{attrs:{href:"https://blog.csdn.net/qq_45893999/article/details/106273214",target:"_blank",rel:"noopener noreferrer"}},[t._v("error: failed to push some refs to如何解决"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"练习"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#练习"}},[t._v("#")]),t._v(" 练习")]),t._v(" "),e("p",[t._v("git设计时是不支持空文件夹提交的，这里是在文件夹里面新建.gitignore文件或者.gitkeep空文件来处理的\nunity也支持忽略以.开头的文件的")]),t._v(" "),e("p",[t._v("新建.gitignore文件\n在空文件夹下新建.gitignore文件，文件内容：")]),t._v(" "),e("h1",{attrs:{id:"ignore-everything-in-this-directory"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ignore-everything-in-this-directory"}},[t._v("#")]),t._v(" Ignore everything in this directory")]),t._v(" "),e("ul",[e("li")]),t._v(" "),e("h1",{attrs:{id:"except-this-file"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#except-this-file"}},[t._v("#")]),t._v(" Except this file")]),t._v(" "),e("p",[t._v("这样就能提交git仓库了\n我这是在windows上操作的，不能直接创建以.开头的文件，参考这篇文章Windows创建.开头的文件或者.开头的文件夹")]),t._v(" "),e("p",[t._v("新建.gitkeep文件\n在空文件夹下新建.gitkeep文件，是空文件，这样就能提交git仓库了")])])}),[],!1,null,null,null);e.default=i.exports}}]);