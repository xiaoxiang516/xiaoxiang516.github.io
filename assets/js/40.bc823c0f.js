(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{368:function(t,a,e){"use strict";e.r(a);var n=e(17),s=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"常用git命令测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用git命令测试"}},[t._v("#")]),t._v(" 常用git命令测试")]),t._v(" "),a("p",[t._v("git命令的逻辑：（报错逻辑）")]),t._v(" "),a("h2",{attrs:{id:"git-init"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-init"}},[t._v("#")]),t._v(" git init")]),t._v(" "),a("h2",{attrs:{id:"git-remote-add-origin-https-github-com-xxx-git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-remote-add-origin-https-github-com-xxx-git"}},[t._v("#")]),t._v(" git remote add origin https://github.com/xxx.git")]),t._v(" "),a("p",[t._v("（相当于和远程建立了关系，origin是远程仓库的别名，可以自定义，相当于代替了url）")]),t._v(" "),a("h2",{attrs:{id:"git-add"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-add"}},[t._v("#")]),t._v(" git add .")]),t._v(" "),a("p",[t._v("1.fatal: not a git repository (or any of the parent directories): .git")]),t._v(" "),a("h2",{attrs:{id:"git-branch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-branch"}},[t._v("#")]),t._v(" git branch")]),t._v(" "),a("p",[t._v("1.fatal: not a git repository (or any of the parent directories): .git")]),t._v(" "),a("p",[t._v("2.返回空/响应没有提示信息 ：git仓库初始化了但是还没commit过文件")]),t._v(" "),a("h2",{attrs:{id:"git-branch-a"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-branch-a"}},[t._v("#")]),t._v(" git branch -a")]),t._v(" "),a("p",[t._v("1.fatal: not a git repository (or any of the parent directories): .git")]),t._v(" "),a("p",[t._v("2.返回空/响应没有提示信息 ：git仓库初始化了但是还没commit过文件")]),t._v(" "),a("p",[t._v("3.例子：\n$ git branch -a")]),t._v(" "),a("ul",[a("li",[t._v("master\nremotes/origin/gh-pages\nremotes/origin/main")])]),t._v(" "),a("h2",{attrs:{id:"git-branch-set-upstream-to-origin-branch-branch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-branch-set-upstream-to-origin-branch-branch"}},[t._v("#")]),t._v(" git branch --set-upstream-to=origin/branch branch")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1. 设置本地与远程分支关联,（前面branch为远程分支名，后面branch为本地分支名）\n\n2.origin/main' does not exist，先执行git pull，把远程分支拉到本地\n$ git branch --set-upstream-to=origin/main master\nerror: the requested upstream branch 'origin/main' does not exist\nhint:\nhint: If you are planning on basing your work on an upstream\nhint: branch that already exists at the remote, you may need to\nhint: run \"git fetch\" to retrieve it.\nhint:\nhint: If you are planning to push out a new local branch that\nhint: will track its remote counterpart, you may want to use\nhint: \"git push -u\" to set the upstream config as you push.\n\n2.1\n$ git pull\nremote: Enumerating objects: 73, done.\nremote: Counting objects: 100% (73/73), done.\nremote: Compressing objects: 100% (29/29), done.\nremote: Total 73 (delta 35), reused 70 (delta 35), pack-reused 0\nUnpacking objects: 100% (73/73), 83.00 KiB | 156.00 KiB/s, done.\nFrom https://gitee.com/xiaoxiang516/gitTest\n * [new branch]      gh-pages   -> origin/gh-pages\n * [new branch]      main       -> origin/main\nThere is no tracking information for the current branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details.\n\n    git pull <remote> <branch>\n\nIf you wish to set tracking information for this branch you can do so with:\n\n    git branch --set-upstream-to=origin/<branch> master\n2.2\n$ git branch --set-upstream-to=origin/main master\nBranch 'master' set up to track remote branch 'main' from 'origin'.\n\n2.3\n$ git branch -vv\n* master c720064 [origin/main: ahead 1, behind 1] deploy\n")])])]),a("p",[t._v("git branch\n查看本地分支，前面有“*”号的代表当前分支\n在这里插入图片描述")]),t._v(" "),a("p",[t._v("git branch -vv 查看本地分支和远程分支关联情况\n在这里插入图片描述")]),t._v(" "),a("p",[t._v("git branch -a查看本地和远程所有分支\n在这里插入图片描述")]),t._v(" "),a("p",[t._v("git remote 查看远程仓库")]),t._v(" "),a("p",[t._v("在这里插入图片描述\norigin仓库下有dev和master两个分支")]),t._v(" "),a("h2",{attrs:{id:"git-branch-vv"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-branch-vv"}},[t._v("#")]),t._v(" git branch -vv")]),t._v(" "),a("p",[t._v("查看本地与远程分支关联情况\n例子：* master 49a5677 [origin/main: ahead 1, behind 1] commit文件")]),t._v(" "),a("h2",{attrs:{id:"git-push"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-push"}},[t._v("#")]),t._v(" git push")]),t._v(" "),a("p",[t._v("1.fatal: not a git repository (or any of the parent directories): .git")]),t._v(" "),a("p",[t._v("2.fatal: No configured push destination.\nEither specify the URL from the command-line or configure a remote repository using")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("git remote add <name> <url>\n")])])]),a("p",[t._v("and then push using the remote name")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("git push <name>\n")])])]),a("p",[t._v("3.fatal: The current branch master has no upstream branch.\nTo push the current branch and set the remote as upstream, use")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("git push --set-upstream origin master\n")])])]),a("p",[t._v("4.比如新建仓库的本地分支是master,远程仓库分支是main，此时远程仓库有文件\nfatal: The upstream branch of your current branch does not match\nthe name of your current branch.  To push to the upstream branch\non the remote, use")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("git push origin HEAD:main\n")])])]),a("p",[t._v("To push to the branch of the same name on the remote, use")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("git push origin HEAD\n")])])]),a("p",[t._v("To choose either option permanently, see push.default in 'git help config'.")]),t._v(" "),a("ol",{attrs:{start:"5"}},[a("li")]),t._v(" "),a("p",[t._v("$ git push -f\nEnumerating objects: 1456, done.\nCounting objects: 100% (1456/1456), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (1190/1190), done.\nWriting objects: 100% (1456/1456), 2.46 MiB | 5.14 MiB/s, done.\nTotal 1456 (delta 708), reused 184 (delta 79), pack-reused 0\nremote: Resolving deltas: 100% (708/708), done.\nTo https://github.com/xiaoxiang516/xiaoxiang516.github.io.git")]),t._v(" "),a("ul",[a("li",[t._v("7de8ae0...f94f7bc main -> main (forced update)")])]),t._v(" "),a("h2",{attrs:{id:"git-push-origin-head-main"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-push-origin-head-main"}},[t._v("#")]),t._v(" git push origin HEAD:main")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("远程分支有代码，如果想要强制覆盖: git push origin HEAD:main -f\n$  git push origin HEAD:main\nTo https://gitee.com/xiaoxiang516/gitTest.git\n! [rejected]        HEAD -> main (non-fast-forward)\nerror: failed to push some refs to 'https://gitee.com/xiaoxiang516/gitTest.git'\nhint: Updates were rejected because a pushed branch tip is behind its remote\nhint: counterpart. Check out this branch and integrate the remote changes\nhint: (e.g. 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.")])]),t._v(" "),a("li",[a("p",[t._v("git push origin HEAD:main -f\n$ git push origin HEAD:main -f\nEnumerating objects: 3, done.\nCounting objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 216 bytes | 216.00 KiB/s, done.\nTotal 3 (delta 0), reused 0 (delta 0), pack-reused 0\nremote: Powered by GITEE.COM [GNK-6.4]\nTo https://gitee.com/xiaoxiang516/gitTest.git")])])]),t._v(" "),a("ul",[a("li",[t._v("3c1a196...49a5677 HEAD -> main (forced update)")])]),t._v(" "),a("h2",{attrs:{id:"git-pull"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-pull"}},[t._v("#")]),t._v(" git pull")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(".\nremote: Enumerating objects: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("73")]),t._v(", done.\nremote: Counting objects: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("% "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("73")]),t._v("/73"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", done.\nremote: Compressing objects: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("% "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v("/30"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", done.\nremote: Total "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("73")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("delta "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("35")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", reused "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("70")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("delta "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("35")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", pack-reused "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\nUnpacking objects: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("% "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("73")]),t._v("/73"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("83.00")]),t._v(" KiB "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("148.00")]),t._v(" KiB/s, done.\nFrom https://gitee.com/xiaoxiang516/gitTest\n * "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("new branch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("      gh-pages   -"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" origin/gh-pages\n * "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("new branch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("      main       -"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" origin/main\nThere is no tracking information "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" the current branch.\nPlease specify "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("which")]),t._v(" branch you want to merge with.\nSee git-pull"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" details.\n\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("remote"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n\nIf you wish to "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" tracking information "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" this branch you can "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" so with:\n\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch --set-upstream-to"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("origin/"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" master"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n\t\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(".\nerror: You have not concluded your merge "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("MERGE_HEAD exists"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".\nhint: Please, commit your changes before merging.\nfatal: Exiting because of unfinished merge.\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(".\nTrying simple merge with 733e2a4aef32cbb7bec414782ad9be0b4136ba9a\nfatal: I cannot "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("read")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("more")]),t._v(" than "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" trees\nMerge with strategy octopus failed.\n")])])]),a("h2",{attrs:{id:"git-status"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-status"}},[t._v("#")]),t._v(" git status")]),t._v(" "),a("p",[t._v("On branch master")]),t._v(" "),a("p",[t._v("No commits yet")]),t._v(" "),a("p",[t._v('Untracked files:\n(use "'),a("code",[t._v("git add <file>")]),t._v('..." to include in what will be committed)\n6.txt')]),t._v(" "),a("p",[t._v('nothing added to commit but untracked files present (use "git add" to track)')]),t._v(" "),a("p",[t._v("$ git push origin HEAD:main -f\nfatal: unable to access 'https://github.com/xiaoxiang516/xiaoxiang516.github.io.git/': Failed to connect to github.com port 443: Timed out")]),t._v(" "),a("p",[t._v("$ git push origin HEAD:main -f\nEnumerating objects: 258, done.\nCounting objects: 100% (258/258), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (233/233), done.\nWriting objects: 100% (258/258), 735.91 KiB | 6.34 MiB/s, done.\nTotal 258 (delta 107), reused 28 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (107/107), done.\nTo https://github.com/xiaoxiang516/xiaoxiang516.github.io.git")]),t._v(" "),a("ul",[a("li",[t._v("85dc153...e636d8d HEAD -> main (forced update)")])]),t._v(" "),a("p",[t._v("git只提交部分修改的文件（提交指定文件）")]),t._v(" "),a("p",[t._v("git只提交部分修改的文件（提交指定文件）\n1/ git status -s 查看仓库状态\n2/ git add src/components/文件名 添加需要提交的文件名（加路径–参考git status 打印出来的文件路径）\n3/ git stash -u -k 忽略其他文件，把现修改的隐藏起来，这样提交的时候就不会提交未被add的文件\n4/ git commit -m “哪里做了修改可写入…”\n5/ git pull 拉取合并\n6/ git push 推送到远程仓库\n7/ git stash pop 恢复之前忽略的文件（非常重要的一步）\n————————————————")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("// 暂存 stash\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash apply stash@"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash list\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("clear")]),t._v("\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-a")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" origin https://gitee.com/xiaoxiang516/demos.git\n "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-v")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull origin master\n "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-vv")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch --set-upstream-to"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("origin/master master\n "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-vv")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("history")]),t._v("\n\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("where "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看git安装路径（注意是git.exe）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--version")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看Git工具的版本的命令")]),t._v("\n")])])]),a("p",[t._v("最近使用git pull的时候多次碰见下面的情况：")]),t._v(" "),a("p",[t._v("There is no tracking information for the current branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details.")]),t._v(" "),a("p",[a("code",[t._v("git pull <remote> <branch>")]),t._v("\nIf you wish to set tracking information for this branch you can do so with:\n"),a("code",[t._v("git branch --set-upstream-to=origin/<branch>")]),t._v(" release")]),t._v(" "),a("p",[t._v("其实，输出的提示信息说的还是比较明白的。")]),t._v(" "),a("p",[t._v("使用git在本地新建一个分支后，需要做远程分支关联。如果没有关联，git会在下面的操作中提示你显示的添加关联。")]),t._v(" "),a("p",[t._v("关联目的是在执行git pull, git push操作时就不需要指定对应的远程分支，你只要没有显示指定，git pull的时候，就会提示你。")]),t._v(" "),a("p",[t._v("解决方法就是按照提示添加一下呗：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch --set-upstream-to"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("origin/remote_branch  your_branch\n")])])]),a("p",[t._v("其中，origin/remote_branch是你本地分支对应的远程分支；your_branch是你当前的本地分支。")]),t._v(" "),a("p",[t._v('git log --pretty=format:"%ai , %an: %s" --since="16 day ago" >> ~/Desktop/commit.log\ngit log --pretty=format:"%ai , %an: %s" --since="10 day ago" | grep "提交者的名字" >> ~/Desktop/commit.log\ngit log --pretty=format:"%ai , %an: %s" --since="12 day ago" | grep "zhuqizhong" >> ~/Desktop/commit-zhuqizhong01.csv\n(表格自适应内容)')]),t._v(" "),a("p",[t._v('1.1、在项目根目录下执行命令，导出 git 提交记录到桌面\n进入项目目录：然后右击选择git bash here     然后在git中执行命令：\ngit log --pretty=format:"%ai , %an: %s" --since=“100 day ago” >> ~/Desktop/commit.log\n1.2 、如果想导出某些提交者的提交记录，可以用 grep过滤，比如我想导出「ianly」这个人在项目中的提交记录：\ngit log --pretty=format:"%ai , %an: %s" --since=“126 day ago” | grep “ianly” >> ~/Desktop/commit-ianly.log\n1.3、导出成 Excel 文件：\ngit log --date=iso --pretty=format:’"%h","%an","%ad","%s"’ >> ~/Desktop/commit.csv')]),t._v(" "),a("h2",{attrs:{id:"git-log查看日志显示的格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-log查看日志显示的格式"}},[t._v("#")]),t._v(" git log查看日志显示的格式")]),t._v(" "),a("p",[t._v("git config --global log.date format:'%Y-%m-%d %H:%M:%S'\n"),a("a",{attrs:{href:"https://blog.csdn.net/weixin_41287260/article/details/119955203",target:"_blank",rel:"noopener noreferrer"}},[a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("默认的git log查看日志显示的格式如下：\nDate: Thu Aug 16 17:44:32 2018 +0800\n可能不是很容易识别。git bash中使用命令设置即可：\n//修改当前仓库log date格式\ngit config log.date iso-strict-local")]),t._v(" "),a("p",[t._v("//全局设置log date格式\ngit config --global log.date iso-strict-local # 修改之后的日历格式：2018-08-23T17:16:39+08:00")]),t._v(" "),a("p",[t._v("git config --global log.date format:'%Y-%m-%d %H:%M:%S' # Date:   2021-08-27 15:38:56")]),t._v(" "),a("h2",{attrs:{id:"删除远程分支dev"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除远程分支dev"}},[t._v("#")]),t._v(" 删除远程分支dev")]),t._v(" "),a("p",[t._v("git push origin --delete dev\nhttps://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF")]),t._v(" "),a("h2",{attrs:{id:"撤销"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#撤销"}},[t._v("#")]),t._v(" 撤销：")]),t._v(" "),a("p",[t._v("git add .\ngit commit\ngit push\ngit stash pop 后有冲突时，如何撤销")]),t._v(" "),a("p",[t._v("切换分支时，如果当前分支有修改，又不想提交或放弃，可以使用 git stash 将改动存到暂存区。\ngit stash 后即可以随意切换分支，切换后再使用 git stash pop 即可将暂存区的改动恢复至当前分支。")]),t._v(" "),a("p",[t._v("但如果使用 git stash pop 后有冲突时，如何撤销?\n可以使用 git reset --hard ，即可撤销 git stash pop 操作，将当前分支状态恢复。\n而该操作后，git stash 暂存区的记录也不会被删除，可通过 git stash show 查看。")]),t._v(" "),a("p",[t._v("git撤销已经push的提交(git 如何撤销push)\nhttp://www.itjxue.com  2023-02-13 17:26  来源:未知  点击次数:295")]),t._v(" "),a("p",[t._v("Git撤销已经push到远程的commit\n在使用git时，push到远端后发现commit了多余的文件，或者希望能够回退到以前的版本。")]),t._v(" "),a("p",[t._v("先在本地回退到相应的版本：")]),t._v(" "),a("p",[t._v("如果此时使用命令：")]),t._v(" "),a("p",[t._v("会提示本地的版本落后于远端的版本；")]),t._v(" "),a("p",[t._v("为了覆盖掉远端的版本信息，使远端的仓库也回退到相应的版本，需要加上参数--force")]),t._v(" "),a("p",[t._v("git撤销已经push的提交(git 如何撤销push)")]),t._v(" "),a("p",[t._v("git push之后如何重新撤回\n主要是参照了这位大哥的文章（ ）")]),t._v(" "),a("p",[t._v("分为两种方法")]),t._v(" "),a("p",[t._v("git reset --hard 会把后面的提交记录全部给覆盖掉，")]),t._v(" "),a("p",[t._v("git log 显示的记录是")]),t._v(" "),a("p",[t._v("比如：")]),t._v(" "),a("p",[t._v("git log 显示的记录是")]),t._v(" "),a("p",[t._v("git push完毕，发现错了，怎么撤销，回退？新建了分支怎么删除？\n可以用git reflog查看，确定你想要指向的地方，比如reset到562cfe7这个位置：")]),t._v(" "),a("p",[t._v("git reset --soft 562cfe7")]),t._v(" "),a("p",[t._v("新建new分支并切换过去")]),t._v(" "),a("p",[t._v("git branch newbranch")]),t._v(" "),a("p",[t._v("git checkout newbranch")]),t._v(" "),a("p",[t._v("第一次git push 用这个命令：")]),t._v(" "),a("p",[t._v("git push --set-upstream origin newbranch")]),t._v(" "),a("p",[t._v("git 如何撤销已push的代码\n要回退到某一个版本，有三种方法")]),t._v(" "),a("p",[t._v("git reset --hard 变更集 使用该变更集覆盖缓存区和工作区")]),t._v(" "),a("p",[t._v("git reset --mixed 变更集 不会改变工作区，但是会用该变更集覆盖缓存区")]),t._v(" "),a("p",[t._v("git reset --soft 变更集?会改变工作区，不会改变缓存区，commit回退到了指定的提交")]),t._v(" "),a("p",[t._v("git reset --hard ^ 会回退到上次提交之前")]),t._v(" "),a("p",[t._v("同理 git reset --hard ^^ 会回退到上上次提交前")]),t._v(" "),a("p",[t._v("git branch --set-upstream 本地关联远程分支\ngit branch --set-upstream-to=origin/remote_branch  your_branch")]),t._v(" "),a("p",[t._v("其中，origin/remote_branch是你本地分支对应的远程分支；your_branch是你当前的本地分支。")]),t._v(" "),a("p",[t._v("Git创建本地分支并关联远程分支 惊鸿一博")]),t._v(" "),a("p",[t._v("本文主要介绍使用Git怎么创建本地分支并提交到远程，以及如何使新建本地分支与远程相关联。\n0. 创建仓库\ngit init")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("创建本地分支\ngit branch 分支名\n例如：git branch dev，这条命令是基于当前分支创建的本地分支，假设当前分支是master(远程分支)，则是基于master分支创建的本地分支dev。")])]),t._v(" "),a("li",[a("p",[t._v("切换到本地分支\ngit checkout 分支名\n例如：git checkout dev，这条命令表示从当前master分支切换到dev分支。")])]),t._v(" "),a("li",[a("p",[t._v("创建本地分支并切换\ngit checkout -b 分支名\n例如：git checkout -b dev，这条命令把创建本地分支和切换到该分支的功能结合起来了，即基于当前分支master创建本地分支dev并切换到该分支下。")])]),t._v(" "),a("li",[a("p",[t._v("提交本地分支到远程仓库\ngit push origin 本地分支名\n例如：git push origin dev，这条命令表示把本地dev分支提交到远程仓库，即创建了远程分支dev。")])])]),t._v(" "),a("p",[t._v("注：要想和其他人分享某个本地分支，你需要把它推送到一个你拥有写权限的远程仓库。\n你创建的本地分支不会因为你的写入操作而被自动同步到你引入的远程服务器上，你需要明确地执行推送分支的操作。\n换句话说，对于无意分享的分支，你尽管保留为私人分支好了，而只推送那些协同工作要用到的特性分支。")]),t._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[t._v("新建本地分支与远程分支关联\ngit branch –set-upstream 本地新建分支名 origin/远程分支名\n或者 git branch –set-upstream-to=origin/远程分支名\n例如：git branch –set-upstream-to=origin/dev，把本地dev分支和远程dev分支相关联。")])]),t._v(" "),a("p",[t._v("注：本地新建分支， push到远程服务器上之后，使用git pull或者git pull 拉取或提交数据时会报错，必须使用命令：git pull origin dev（指定远程分支）；\n如果想直接使用git pull或git push拉去提交数据就必须创建本地分支与远程分支的关联。")]),t._v(" "),a("ol",{attrs:{start:"6"}},[a("li",[a("p",[t._v("查看本地分支与远程分支的映射关系\ngit branch -vv #（注意是双v）")])]),t._v(" "),a("li",[a("p",[t._v("git pull 与 fatal: refusing to merge unrelated histories\nhttps://www.jianshu.com/p/1674f8b6aeaf\n一、fatal: refusing to merge unrelated histories\n新建了一个仓库之后，把本地仓库进行关联提交、拉取的时候，出现了如下错误：")])])]),t._v(" "),a("p",[t._v("fatal: 'master' does not appear to be a git repository\nfatal: Could not read from remote repository.\n二、解决方案\n在你操作命令后面加 --allow-unrelated-histories\n例如：")]),t._v(" "),a("p",[t._v("git merge master --allow-unrelated-histories\n$ git pull --allow-unrelated-histories\nCONFLICT (add/add): Merge conflict in .gitignore\nAuto-merging .gitignore\nAutomatic merge failed; fix conflicts and then commit the result.\n我这里由于使用了官方的 .gitignore 自动合并失败，需要手动合并之后再进行 add、commit 即可")]),t._v(" "),a("p",[t._v("如果你是git pull或者git push报fatal: refusing to merge unrelated histories\n同理：")]),t._v(" "),a("p",[t._v("git pull origin master --allow-unrelated-histories / git pull --allow-unrelated-histories")]),t._v(" "),a("div",{staticClass:"language-git pull --allow-unrelated-histories extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("There is no tracking information for the current branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details.\n\n    git pull <remote> <branch>\n\nIf you wish to set tracking information for this branch you can do so with:\n\n    git branch --set-upstream-to=origin/<branch> main\n\n")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);