(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{343:function(t,n,e){"use strict";e.r(n);var a=e(14),i=Object(a.a)({},(function(){var t=this._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("Contents\nIntroduction\n1 Scope\n2 Conformance\n3 Normative references\n4 Overview\n  4.1 Web Scripting\n  4.2 ECMAScript Overview\n  4.2.1 Objects\n  4.2.2 The Strict Variant of ECMAScript\n  4.3 Terms and definitions\n  4.3.1 type\n  4.3.2 primitive value\n  4.3.3 object\n  4.3.4 constructor\n  4.3.5 prototype\n  4.3.6 ordinary object\n  4.3.7 exotic object\n  4.3.8 standard object\n  4.3.9 built-in object\n  4.3.10 undefined value\n  4.3.11 Undefined type\n  4.3.12 null value\n  4.3.13 Null type\n  4.3.14 Boolean value\n  4.3.15 Boolean type\n  4.3.16 Boolean object\n  4.3.17 String value\n  4.3.18 String type\n  4.3.19 String object\n  4.3.20 Number value\n  4.3.21 Number type\n  4.3.22 Number object\n  4.3.23 Infinity\n  4.3.24 NaN\n  4.3.25 Symbol value\n  4.3.26 Symbol type\n  4.3.27 Symbol object\n  4.3.28 function\n  4.3.29 built-in function\n  4.3.30 property\n  4.3.31 method\n  4.3.32 built-in method\n  4.3.33 attribute\n  4.3.34 own property\n  4.3.35 inherited property\n  4.4 Organization of This Specification\n5 Notational Conventions\n  5.1 Syntactic and Lexical Grammars\n  5.1.1 Context-Free Grammars\n  5.1.2 The Lexical and RegExp Grammars\n  5.1.3 The Numeric String Grammar\n  5.1.4 The Syntactic Grammar\n  5.1.5 Grammar Notation\n5.2 Algorithm Conventions\n5.3 Static Semantic Rules\n6 ECMAScript Data Types and Values\n6.1 ECMAScript Language Types\n  6.1.1 The Undefined Type\n  6.1.2 The Null Type\n  6.1.3 The Boolean Type\n  6.1.4 The String Type\n  6.1.5 The Symbol Type\n  6.1.6 The Number Type\n  6.1.7 The Object Type\n6.2 ECMAScript Specification Types\n  6.2.1 The List and Record Specification Type\n  6.2.2 The Completion Record Specification Type\n  6.2.3 The Reference Specification Type\n  6.2.4 The Property Descriptor Specification Type\n  6.2.5 The Lexical Environment and Environment Record Specification Types\n  6.2.6 Data Blocks\n7 Abstract Operations\n7.1 Type Conversion\n7.1.1 ToPrimitive ( input [, PreferredType] )\n7.1.2 ToBoolean ( argument )\n7.1.3 ToNumber ( argument )\n7.1.4 ToInteger ( argument )\n7.1.5 ToInt32 ( argument )\n7.1.6 ToUint32 ( argument )\n7.1.7 ToInt16 ( argument )\n7.1.8 ToUint16 ( argument )\n7.1.9 ToInt8 ( argument )\n7.1.10 ToUint8 ( argument )\n7.1.11 ToUint8Clamp ( argument )\n7.1.12 ToString ( argument )\n7.1.13 ToObject ( argument )\n7.1.14 ToPropertyKey ( argument )\n7.1.15 ToLength ( argument )\n7.1.16 CanonicalNumericIndexString ( argument )\n7.2 Testing and Comparison Operations\n7.2.1 RequireObjectCoercible ( argument )\n7.2.2 IsArray ( argument )\n7.2.3 IsCallable ( argument )\n7.2.4 IsConstructor ( argument )\n7.2.5 IsExtensible (O)\n7.2.6 IsInteger ( argument )\n7.2.7 IsPropertyKey ( argument )\n7.2.8 IsRegExp ( argument )\n7.2.9 SameValue(x, y)\n7.2.10 SameValueZero(x, y)\n7.2.11 Abstract Relational Comparison\n7.2.12 Abstract Equality Comparison\n7.2.13 Strict Equality Comparison\n7.3 Operations on Objects\n7.3.1 Get (O, P)\n7.3.2 GetV (V, P)\n7.3.3 Set (O, P, V, Throw)\n7.3.4 CreateDataProperty (O, P, V)\n7.3.5 CreateMethodProperty (O, P, V)\n7.3.6 CreateDataPropertyOrThrow (O, P, V)\n7.3.7 DefinePropertyOrThrow (O, P, desc)\n7.3.8 DeletePropertyOrThrow (O, P)\n7.3.9 GetMethod (O, P)\n7.3.10 HasProperty (O, P)\n7.3.11 HasOwnProperty (O, P)\n7.3.12 Call(F, V, [argumentsList])\n7.3.13 Construct (F, [argumentsList], [newTarget])\n7.3.14 SetIntegrityLevel (O, level)\n7.3.15 TestIntegrityLevel (O, level)\n7.3.16 CreateArrayFromList (elements)\n7.3.17 CreateListFromArrayLike (obj [, elementTypes] )\n7.3.18 Invoke(O,P, [argumentsList])\n7.3.19 OrdinaryHasInstance (C, O)\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n7.3.21 EnumerableOwnNames (O)\n7.3.22 GetFunctionRealm ( obj )\n7.4 Operations on Iterator Objects\n7.4.1 GetIterator ( obj, method )\n7.4.2 IteratorNext ( iterator, value )\n7.4.3 IteratorComplete ( iterResult )\n7.4.4 IteratorValue ( iterResult )\n7.4.5 IteratorStep ( iterator )\n7.4.6 IteratorClose( iterator, completion )\n7.4.7 CreateIterResultObject ( value, done )\n7.4.8 CreateListIterator ( list )\n8 Executable Code and Execution Contexts\n8.1 Lexical Environments\n8.1.1 Environment Records\n8.1.2 Lexical Environment Operations\n8.2 Code Realms\n8.2.1 CreateRealm ( )\n8.2.2 CreateIntrinsics ( realmRec )\n8.2.3 SetRealmGlobalObject ( realmRec, globalObj )\n8.2.4 SetDefaultGlobalBindings ( realmRec )\n8.3 Execution Contexts\n8.3.1 ResolveBinding ( name, [env] )\n8.3.2 GetThisEnvironment ( )\n8.3.3 ResolveThisBinding ( )\n8.3.4 GetNewTarget ( )\n8.3.5 GetGlobalObject ( )\n8.4 Jobs and Job Queues\n8.4.1 EnqueueJob (queueName, job, arguments)\n8.4.2 NextJob result\n8.5 ECMAScript Initialization()\n8.5.1 InitializeHostDefinedRealm ( realm )\n9 Ordinary and Exotic Objects Behaviours\n9.1 Ordinary Object Internal Methods and Internal Slots\n9.1.1 [[GetPrototypeOf]] ( )\n9.1.2 [[SetPrototypeOf]] (V)\n9.1.3 [[IsExtensible]] ( )\n9.1.4 [[PreventExtensions]] ( )\n9.1.5 [[GetOwnProperty]] (P)\n9.1.6 [[DefineOwnProperty]] (P, Desc)\n9.1.7 [[HasProperty]](P)\n9.1.8 [[Get]] (P, Receiver)\n9.1.9 [[Set]] ( P, V, Receiver)\n9.1.10 [[Delete]] (P)\n9.1.11 [[Enumerate]] ()\n9.1.12 [[OwnPropertyKeys]] ( )\n9.1.13 ObjectCreate(proto, internalSlotsList)\n9.1.14 OrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto, internalSlotsList )\n9.1.15 GetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\n9.2 ECMAScript Function Objects\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n9.2.2 [[Construct]] ( argumentsList, newTarget)\n9.2.3 FunctionAllocate (functionPrototype, strict [,functionKind] )\n9.2.4 FunctionInitialize (F, kind, ParameterList, Body, Scope)\n9.2.5 FunctionCreate (kind, ParameterList, Body, Scope, Strict, prototype)\n9.2.6 GeneratorFunctionCreate (kind, ParameterList, Body, Scope, Strict)\n9.2.7 AddRestrictedFunctionProperties ( F, realm )\n9.2.8 MakeConstructor (F, writablePrototype, prototype)\n9.2.9 MakeClassConstructor ( F)\n9.2.10 MakeMethod ( F, homeObject)\n9.2.11 SetFunctionName (F, name, prefix)\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n9.3 Built-in Function Objects\n9.3.1 [[Call]] ( thisArgument, argumentsList)\n9.3.2 [[Construct]] (argumentsList, newTarget)\n9.3.3 CreateBuiltinFunction(realm, steps, prototype, internalSlotsList)\n9.4 Built-in Exotic Object Internal Methods and Slots\n9.4.1 Bound Function Exotic Objects\n9.4.2 Array Exotic Objects\n9.4.3 String Exotic Objects\n9.4.4 Arguments Exotic Objects\n9.4.5 Integer Indexed Exotic Objects\n9.4.6 Module Namespace Exotic Objects\n9.5 Proxy Object Internal Methods and Internal Slots\n9.5.1 [[GetPrototypeOf]] ( )\n9.5.2 [[SetPrototypeOf]] (V)\n9.5.3 [[IsExtensible]] ( )\n9.5.4 [[PreventExtensions]] ( )\n9.5.5 [[GetOwnProperty]] (P)\n9.5.6 [[DefineOwnProperty]] (P, Desc)\n9.5.7 [[HasProperty]] (P)\n9.5.8 [[Get]] (P, Receiver)\n9.5.9 [[Set]] ( P, V, Receiver)\n9.5.10 [[Delete]] (P)\n9.5.11 [[Enumerate]] ()\n9.5.12 [[OwnPropertyKeys]] ( )\n9.5.13 [[Call]] (thisArgument, argumentsList)\n9.5.14 [[Construct]] ( argumentsList, newTarget)\n9.5.15 ProxyCreate(target, handler)\n10 ECMAScript Language: Source Code\n10.1 Source Text\n10.1.1 Static Semantics: UTF16Encoding ( cp )\n10.1.2 Static Semantics: UTF16Decode( lead, trail )\n10.2 Types of Source Code\n10.2.1 Strict Mode Code\n10.2.2 Non-ECMAScript Functions\n11 ECMAScript Language: Lexical Grammar\n11.1 Unicode Format-Control Characters\n11.2 White Space\n11.3 Line Terminators\n11.4 Comments\n11.5 Tokens\n11.6 Names and Keywords\n11.6.1 Identifier Names\n11.6.2 Reserved Words\n11.7 Punctuators\n11.8 Literals\n11.8.1 Null Literals\n11.8.2 Boolean Literals\n11.8.3 Numeric Literals\n11.8.4 String Literals\n11.8.5 Regular Expression Literals\n11.8.6 Template Literal Lexical Components\n11.9 Automatic Semicolon Insertion\n11.9.1 Rules of Automatic Semicolon Insertion\n11.9.2 Examples of Automatic Semicolon Insertion\n12 ECMAScript Language: Expressions\n12.1 Identifiers\n12.1.1 Static Semantics: Early Errors\n12.1.2 Static Semantics: BoundNames\n12.1.3 Static Semantics: IsValidSimpleAssignmentTarget\n12.1.4 Static Semantics: StringValue\n12.1.5 Runtime Semantics: BindingInitialization\n12.1.6 Runtime Semantics: Evaluation\n12.2 Primary Expression\n12.2.1 Semantics\n12.2.2 The this Keyword\n12.2.3 Identifier Reference\n12.2.4 Literals\n12.2.5 Array Initializer\n12.2.6 Object Initializer\n12.2.7 Function Defining Expressions\n12.2.8 Regular Expression Literals\n12.2.9 Template Literals\n12.2.10 The Grouping Operator\n12.3 Left-Hand-Side Expressions\n12.3.1 Static Semantics\n12.3.2 Property Accessors\n12.3.3 The new Operator\n12.3.4 Function Calls\n12.3.5 The super Keyword\n12.3.6 Argument Lists\n12.3.7 Tagged Templates\n12.3.8 Meta Properties\n12.4 Postfix Expressions\n12.4.1 Static Semantics: Early Errors\n12.4.2 Static Semantics: IsFunctionDefinition\n12.4.3 Static Semantics: IsValidSimpleAssignmentTarget\n12.4.4 Postfix Increment Operator\n12.4.5 Postfix Decrement Operator\n12.5 Unary Operators\n12.5.1 Static Semantics: Early Errors\n12.5.2 Static Semantics: IsFunctionDefinition\n12.5.3 Static Semantics: IsValidSimpleAssignmentTarget\n12.5.4 The delete Operator\n12.5.5 The void Operator\n12.5.6 The typeof Operator\n12.5.7 Prefix Increment Operator\n12.5.8 Prefix Decrement Operator\n12.5.9 Unary + Operator\n12.5.10 Unary - Operator\n12.5.11 Bitwise NOT Operator ( ~ )\n12.5.12 Logical NOT Operator ( ! )\n12.6 Multiplicative Operators\n12.6.1 Static Semantics: IsFunctionDefinition\n12.6.2 Static Semantics: IsValidSimpleAssignmentTarget\n12.6.3 Runtime Semantics: Evaluation\n12.7 Additive Operators\n12.7.1 Static Semantics: IsFunctionDefinition\n12.7.2 Static Semantics: IsValidSimpleAssignmentTarget\n12.7.3 The Addition operator ( + )\n12.7.4 The Subtraction Operator ( - )\n12.7.5 Applying the Additive Operators to Numbers\n12.8 Bitwise Shift Operators\n12.8.1 Static Semantics: IsFunctionDefinition\n12.8.2 Static Semantics: IsValidSimpleAssignmentTarget\n12.8.3 The Left Shift Operator ( << )\n12.8.4 The Signed Right Shift Operator ( >> )\n12.8.5 The Unsigned Right Shift Operator ( >>> )\n12.9 Relational Operators\n12.9.1 Static Semantics: IsFunctionDefinition\n12.9.2 Static Semantics: IsValidSimpleAssignmentTarget\n12.9.3 Runtime Semantics: Evaluation\n12.9.4 Runtime Semantics: InstanceofOperator(O, C)\n12.10 Equality Operators\n12.10.1 Static Semantics: IsFunctionDefinition\n12.10.2 Static Semantics: IsValidSimpleAssignmentTarget\n12.10.3 Runtime Semantics: Evaluation\n12.11 Binary Bitwise Operators\n12.11.1 Static Semantics: IsFunctionDefinition\n12.11.2 Static Semantics: IsValidSimpleAssignmentTarget\n12.11.3 Runtime Semantics: Evaluation\n12.12 Binary Logical Operators\n12.12.1 Static Semantics: IsFunctionDefinition\n12.12.2 Static Semantics: IsValidSimpleAssignmentTarget\n12.12.3 Runtime Semantics: Evaluation\n12.13 Conditional Operator ( ? : )\n12.13.1 Static Semantics: IsFunctionDefinition\n12.13.2 Static Semantics: IsValidSimpleAssignmentTarget\n12.13.3 Runtime Semantics: Evaluation\n12.14 Assignment Operators\n12.14.1 Static Semantics: Early Errors\n12.14.2 Static Semantics: IsFunctionDefinition\n12.14.3 Static Semantics: IsValidSimpleAssignmentTarget\n12.14.4 Runtime Semantics: Evaluation\n12.14.5 Destructuring Assignment\n12.15 Comma Operator ( , )\n12.15.1 Static Semantics: IsFunctionDefinition\n12.15.2 Static Semantics: IsValidSimpleAssignmentTarget\n12.15.3 Runtime Semantics: Evaluation\n13 ECMAScript Language: Statements and Declarations\n13.1 Statement Semantics\n13.1.1 Static Semantics: ContainsDuplicateLabels\n13.1.2 Static Semantics: ContainsUndefinedBreakTarget\n13.1.3 Static Semantics: ContainsUndefinedContinueTarget\n13.1.4 Static Semantics: DeclarationPart\n13.1.5 Static Semantics: VarDeclaredNames\n13.1.6 Static Semantics: VarScopedDeclarations\n13.1.7 Runtime Semantics: LabelledEvaluation\n13.1.8 Runtime Semantics: Evaluation\n13.2 Block\n13.2.1 Static Semantics: Early Errors\n13.2.2 Static Semantics: ContainsDuplicateLabels\n13.2.3 Static Semantics: ContainsUndefinedBreakTarget\n13.2.4 Static Semantics: ContainsUndefinedContinueTarget\n13.2.5 Static Semantics: LexicallyDeclaredNames\n13.2.6 Static Semantics: LexicallyScopedDeclarations\n13.2.7 Static Semantics: TopLevelLexicallyDeclaredNames\n13.2.8 Static Semantics: TopLevelLexicallyScopedDeclarations\n13.2.9 Static Semantics: TopLevelVarDeclaredNames\n13.2.10 Static Semantics: TopLevelVarScopedDeclarations\n13.2.11 Static Semantics: VarDeclaredNames\n13.2.12 Static Semantics: VarScopedDeclarations\n13.2.13 Runtime Semantics: Evaluation\n13.2.14 Runtime Semantics: BlockDeclarationInstantiation( code, env )\n13.3 Declarations and the Variable Statement\n13.3.1 Let and Const Declarations\n13.3.2 Variable Statement\n13.3.3 Destructuring Binding Patterns\n13.4 Empty Statement\n13.4.1 Runtime Semantics: Evaluation\n13.5 Expression Statement\n13.5.1 Runtime Semantics: Evaluation\n13.6 The if Statement\n13.6.1 Static Semantics: Early Errors\n13.6.2 Static Semantics: ContainsDuplicateLabels\n13.6.3 Static Semantics: ContainsUndefinedBreakTarget\n13.6.4 Static Semantics: ContainsUndefinedContinueTarget\n13.6.5 Static Semantics: VarDeclaredNames\n13.6.6 Static Semantics: VarScopedDeclarations\n13.6.7 Runtime Semantics: Evaluation\n13.7 Iteration Statements\n13.7.1 Semantics\n13.7.2 The do-while Statement\n13.7.3 The while Statement\n13.7.4 The for Statement\n13.7.5 The for-in and for-of Statements\n13.8 The continue Statement\n13.8.1 Static Semantics: Early Errors\n13.8.2 Static Semantics: ContainsUndefinedContinueTarget\n13.8.3 Runtime Semantics: Evaluation\n13.9 The break Statement\n13.9.1 Static Semantics: Early Errors\n13.9.2 Static Semantics: ContainsUndefinedBreakTarget\n13.9.3 Runtime Semantics: Evaluation\n13.10 The return Statement\n13.10.1 Runtime Semantics: Evaluation\n13.11 The with Statement\n13.11.1 Static Semantics: Early Errors\n13.11.2 Static Semantics: ContainsDuplicateLabels\n13.11.3 Static Semantics: ContainsUndefinedBreakTarget\n13.11.4 Static Semantics: ContainsUndefinedContinueTarget\n13.11.5 Static Semantics: VarDeclaredNames\n13.11.6 Static Semantics: VarScopedDeclarations\n13.11.7 Runtime Semantics: Evaluation\n13.12 The switch Statement\n13.12.1 Static Semantics: Early Errors\n13.12.2 Static Semantics: ContainsDuplicateLabels\n13.12.3 Static Semantics: ContainsUndefinedBreakTarget\n13.12.4 Static Semantics: ContainsUndefinedContinueTarget\n13.12.5 Static Semantics: LexicallyDeclaredNames\n13.12.6 Static Semantics: LexicallyScopedDeclarations\n13.12.7 Static Semantics: VarDeclaredNames\n13.12.8 Static Semantics: VarScopedDeclarations\n13.12.9 Runtime Semantics: CaseBlockEvaluation\n13.12.10 Runtime Semantics: CaseSelectorEvaluation\n13.12.11 Runtime Semantics: Evaluation\n13.13 Labelled Statements\n13.13.1 Static Semantics: Early Errors\n13.13.2 Static Semantics: ContainsDuplicateLabels\n13.13.3 Static Semantics: ContainsUndefinedBreakTarget\n13.13.4 Static Semantics: ContainsUndefinedContinueTarget\n13.13.5 Static Semantics: IsLabelledFunction ( stmt )\n13.13.6 Static Semantics: LexicallyDeclaredNames\n13.13.7 Static Semantics: LexicallyScopedDeclarations\n13.13.8 Static Semantics: TopLevelLexicallyDeclaredNames\n13.13.9 Static Semantics: TopLevelLexicallyScopedDeclarations\n13.13.10 Static Semantics: TopLevelVarDeclaredNames\n13.13.11 Static Semantics: TopLevelVarScopedDeclarations\n13.13.12 Static Semantics: VarDeclaredNames\n13.13.13 Static Semantics: VarScopedDeclarations\n13.13.14 Runtime Semantics: LabelledEvaluation\n13.13.15 Runtime Semantics: Evaluation\n13.14 The throw Statement\n13.14.1 Runtime Semantics: Evaluation\n13.15 The try Statement\n13.15.1 Static Semantics: Early Errors\n13.15.2 Static Semantics: ContainsDuplicateLabels\n13.15.3 Static Semantics: ContainsUndefinedBreakTarget\n13.15.4 Static Semantics: ContainsUndefinedContinueTarget\n13.15.5 Static Semantics: VarDeclaredNames\n13.15.6 Static Semantics: VarScopedDeclarations\n13.15.7 Runtime Semantics: CatchClauseEvaluation\n13.15.8 Runtime Semantics: Evaluation\n13.16 The debugger statement\n13.16.1 Runtime Semantics: Evaluation\n14 ECMAScript Language: Functions and Classes\n14.1 Function Definitions\n14.1.1 Directive Prologues and the Use Strict Directive\n14.1.2 Static Semantics: Early Errors\n14.1.3 Static Semantics: BoundNames\n14.1.4 Static Semantics: Contains\n14.1.5 Static Semantics: ContainsExpression\n14.1.6 Static Semantics: ExpectedArgumentCount\n14.1.7 Static Semantics: HasInitializer\n14.1.8 Static Semantics: HasName\n14.1.9 Static Semantics: IsAnonymousFunctionDefinition ( production )\n14.1.10 Static Semantics: IsConstantDeclaration\n14.1.11 Static Semantics: IsFunctionDefinition\n14.1.12 Static Semantics: IsSimpleParameterList\n14.1.13 Static Semantics: LexicallyDeclaredNames\n14.1.14 Static Semantics: LexicallyScopedDeclarations\n14.1.15 Static Semantics: VarDeclaredNames\n14.1.16 Static Semantics: VarScopedDeclarations\n14.1.17 Runtime Semantics: EvaluateBody\n14.1.18 Runtime Semantics: IteratorBindingInitialization\n14.1.19 Runtime Semantics: InstantiateFunctionObject\n14.1.20 Runtime Semantics: Evaluation\n14.2 Arrow Function Definitions\n14.2.1 Static Semantics: Early Errors\n14.2.2 Static Semantics: BoundNames\n14.2.3 Static Semantics: Contains\n14.2.4 Static Semantics: ContainsExpression\n14.2.5 Static Semantics: ExpectedArgumentCount\n14.2.6 Static Semantics: HasInitializer\n14.2.7 Static Semantics: HasName\n14.2.8 Static Semantics: IsSimpleParameterList\n14.2.9 Static Semantics: CoveredFormalsList\n14.2.10 Static Semantics: LexicallyDeclaredNames\n14.2.11 Static Semantics: LexicallyScopedDeclarations\n14.2.12 Static Semantics: VarDeclaredNames\n14.2.13 Static Semantics: VarScopedDeclarations\n14.2.14 Runtime Semantics: IteratorBindingInitialization\n14.2.15 Runtime Semantics: EvaluateBody\n14.2.16 Runtime Semantics: Evaluation\n14.3 Method Definitions\n14.3.1 Static Semantics: Early Errors\n14.3.2 Static Semantics: ComputedPropertyContains\n14.3.3 Static Semantics: ExpectedArgumentCount\n14.3.4 Static Semantics: HasComputedPropertyKey\n14.3.5 Static Semantics: HasDirectSuper\n14.3.6 Static Semantics: PropName\n14.3.7 Static Semantics: SpecialMethod\n14.3.8 Runtime Semantics: DefineMethod\n14.3.9 Runtime Semantics: PropertyDefinitionEvaluation\n14.4 Generator Function Definitions\n14.4.1 Static Semantics: Early Errors\n14.4.2 Static Semantics: BoundNames\n14.4.3 Static Semantics: ComputedPropertyContains\n14.4.4 Static Semantics: Contains\n14.4.5 Static Semantics: HasComputedPropertyKey\n14.4.6 Static Semantics: HasDirectSuper\n14.4.7 Static Semantics: HasName\n14.4.8 Static Semantics: IsConstantDeclaration\n14.4.9 Static Semantics: IsFunctionDefinition\n14.4.10 Static Semantics: PropName\n14.4.11 Runtime Semantics: EvaluateBody\n14.4.12 Runtime Semantics: InstantiateFunctionObject\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n14.4.14 Runtime Semantics: Evaluation\n14.5 Class Definitions\n14.5.1 Static Semantics: Early Errors\n14.5.2 Static Semantics: BoundNames\n14.5.3 Static Semantics: ConstructorMethod\n14.5.4 Static Semantics: Contains\n14.5.5 Static Semantics: ComputedPropertyContains\n14.5.6 Static Semantics: HasName\n14.5.7 Static Semantics: IsConstantDeclaration\n14.5.8 Static Semantics: IsFunctionDefinition\n14.5.9 Static Semantics: IsStatic\n14.5.10 Static Semantics: NonConstructorMethodDefinitions\n14.5.11 Static Semantics: PrototypePropertyNameList\n14.5.12 Static Semantics: PropName\n14.5.13 Static Semantics: StaticPropertyNameList\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n14.5.15 Runtime Semantics: BindingClassDeclarationEvaluation\n14.5.16 Runtime Semantics: Evaluation\n14.6 Tail Position Calls\n14.6.1 Static Semantics: IsInTailPosition(nonterminal)\n14.6.2 Static Semantics: HasProductionInTailPosition\n14.6.3 Runtime Semantics: PrepareForTailCall ( )\n15 ECMAScript Language: Scripts and Modules\n15.1 Scripts\n15.1.1 Static Semantics: Early Errors\n15.1.2 Static Semantics: IsStrict\n15.1.3 Static Semantics: LexicallyDeclaredNames\n15.1.4 Static Semantics: LexicallyScopedDeclarations\n15.1.5 Static Semantics: VarDeclaredNames\n15.1.6 Static Semantics: VarScopedDeclarations\n15.1.7 Runtime Semantics: ScriptEvaluation\n15.1.8 Runtime Semantics: GlobalDeclarationInstantiation (script, env)\n15.1.9 Runtime Semantics: ScriptEvaluationJob ( sourceText )\n15.2 Modules\n15.2.1 Module Semantics\n15.2.2 Imports\n15.2.3 Exports\n16 Error Handling and Language Extensions\n16.1 Forbidden Extensions\n17 ECMAScript Standard Built-in Objects\n18 The Global Object\n18.1 Value Properties of the Global Object\n18.1.1 Infinity\n18.1.2 NaN\n18.1.3 undefined\n18.2 Function Properties of the Global Object\n18.2.1 eval (x)\n18.2.2 isFinite (number)\n18.2.3 isNaN (number)\n18.2.4 parseFloat (string)\n18.2.5 parseInt (string , radix)\n18.2.6 URI Handling Functions\n18.3 Constructor Properties of the Global Object\n18.3.1 Array ( . . . )\n18.3.2 ArrayBuffer ( . . . )\n18.3.3 Boolean ( . . . )\n18.3.4 DataView ( . . . )\n18.3.5 Date ( . . . )\n18.3.6 Error ( . . . )\n18.3.7 EvalError ( . . . )\n18.3.8 Float32Array ( . . . )\n18.3.9 Float64Array ( . . . )\n18.3.10 Function ( . . . )\n18.3.11 Int8Array ( . . . )\n18.3.12 Int16Array ( . . . )\n18.3.13 Int32Array ( . . . )\n18.3.14 Map ( . . . )\n18.3.15 Number ( . . . )\n18.3.16 Object ( . . . )\n18.3.17 Proxy ( . . . )\n18.3.18 Promise ( . . . )\n18.3.19 RangeError ( . . . )\n18.3.20 ReferenceError ( . . . )\n18.3.21 RegExp ( . . . )\n18.3.22 Set ( . . . )\n18.3.23 String ( . . . )\n18.3.24 Symbol ( . . . )\n18.3.25 SyntaxError ( . . . )\n18.3.26 TypeError ( . . . )\n18.3.27 Uint8Array ( . . . )\n18.3.28 Uint8ClampedArray ( . . . )\n18.3.29 Uint16Array ( . . . )\n18.3.30 Uint32Array ( . . . )\n18.3.31 URIError ( . . . )\n18.3.32 WeakMap ( . . . )\n18.3.33 WeakSet ( . . . )\n18.4 Other Properties of the Global Object\n18.4.1 JSON\n18.4.2 Math\n18.4.3 Reflect\n19 Fundamental Objects\n19.1 Object Objects\n19.1.1 The Object Constructor\n19.1.2 Properties of the Object Constructor\n19.1.3 Properties of the Object Prototype Object\n19.1.4 Properties of Object Instances\n19.2 Function Objects\n19.2.1 The Function Constructor\n19.2.2 Properties of the Function Constructor\n19.2.3 Properties of the Function Prototype Object\n19.2.4 Function Instances\n19.3 Boolean Objects\n19.3.1 The Boolean Constructor\n19.3.2 Properties of the Boolean Constructor\n19.3.3 Properties of the Boolean Prototype Object\n19.3.4 Properties of Boolean Instances\n19.4 Symbol Objects\n19.4.1 The Symbol Constructor\n19.4.2 Properties of the Symbol Constructor\n19.4.3 Properties of the Symbol Prototype Object\n19.4.4 Properties of Symbol Instances\n19.5 Error Objects\n19.5.1 The Error Constructor\n19.5.2 Properties of the Error Constructor\n19.5.3 Properties of the Error Prototype Object\n19.5.4 Properties of Error Instances\n19.5.5 Native Error Types Used in This Standard\n19.5.6 NativeError Object Structure\n20 Numbers and Dates\n20.1 Number Objects\n20.1.1 The Number Constructor\n20.1.2 Properties of the Number Constructor\n20.1.3 Properties of the Number Prototype Object\n20.1.4 Properties of Number Instances\n20.2 The Math Object\n20.2.1 Value Properties of the Math Object\n20.2.2 Function Properties of the Math Object\n20.3 Date Objects\n20.3.1 Overview of Date Objects and Definitions of Abstract Operations\n20.3.2 The Date Constructor\n20.3.3 Properties of the Date Constructor\n20.3.4 Properties of the Date Prototype Object\n20.3.5 Properties of Date Instances\n21 Text Processing\n21.1 String Objects\n21.1.1 The String Constructor\n21.1.2 Properties of the String Constructor\n21.1.3 Properties of the String Prototype Object\n21.1.4 Properties of String Instances\n21.1.5 String Iterator Objects\n21.2 RegExp (Regular Expression) Objects\n21.2.1 Patterns\n21.2.2 Pattern Semantics\n21.2.3 The RegExp Constructor\n21.2.4 Properties of the RegExp Constructor\n21.2.5 Properties of the RegExp Prototype Object\n21.2.6 Properties of RegExp Instances\n22 Indexed Collections\n22.1 Array Objects\n22.1.1 The Array Constructor\n22.1.2 Properties of the Array Constructor\n22.1.3 Properties of the Array Prototype Object\n22.1.4 Properties of Array Instances\n22.1.5 Array Iterator Objects\n22.2 TypedArray Objects\n22.2.1 The %TypedArray% Intrinsic Object\n22.2.2 Properties of the %TypedArray% Intrinsic Object\n22.2.3 Properties of the %TypedArrayPrototype% Object\n22.2.4 The TypedArray Constructors\n22.2.5 Properties of the TypedArray Constructors\n22.2.6 Properties of TypedArray Prototype Objects\n22.2.7 Properties of TypedArray Instances\n23 Keyed Collection\n23.1 Map Objects\n23.1.1 The Map Constructor\n23.1.2 Properties of the Map Constructor\n23.1.3 Properties of the Map Prototype Object\n23.1.4 Properties of Map Instances\n23.1.5 Map Iterator Objects\n23.2 Set Objects\n23.2.1 The Set Constructor\n23.2.2 Properties of the Set Constructor\n23.2.3 Properties of the Set Prototype Object\n23.2.4 Properties of Set Instances\n23.2.5 Set Iterator Objects\n23.3 WeakMap Objects\n23.3.1 The WeakMap Constructor\n23.3.2 Properties of the WeakMap Constructor\n23.3.3 Properties of the WeakMap Prototype Object\n23.3.4 Properties of WeakMap Instances\n23.4 WeakSet Objects\n23.4.1 The WeakSet Constructor\n23.4.2 Properties of the WeakSet Constructor\n23.4.3 Properties of the WeakSet Prototype Object\n23.4.4 Properties of WeakSet Instances\n24 Structured Data\n24.1 ArrayBuffer Objects\n24.1.1 Abstract Operations For ArrayBuffer Objects\n24.1.2 The ArrayBuffer Constructor\n24.1.3 Properties of the ArrayBuffer Constructor\n24.1.4 Properties of the ArrayBuffer Prototype Object\n24.1.5 Properties of the ArrayBuffer Instances\n24.2 DataView Objects\n24.2.1 Abstract Operations For DataView Objects\n24.2.2 The DataView Constructor\n24.2.3 Properties of the DataView Constructor\n24.2.4 Properties of the DataView Prototype Object\n24.2.5 Properties of DataView Instances\n24.3 The JSON Object\n24.3.1 JSON.parse ( text [ , reviver ] )\n24.3.2 JSON.stringify ( value [ , replacer [ , space ] ] )\n24.3.3 JSON [ @@toStringTag ]\n25 Control Abstraction Objects\n25.1 Iteration\n25.1.1 Common Iteration Interfaces\n25.1.2 The %IteratorPrototype% Object\n25.2 GeneratorFunction Objects\n25.2.1 The GeneratorFunction Constructor\n25.2.2 Properties of the GeneratorFunction Constructor\n25.2.3 Properties of the GeneratorFunction Prototype Object\n25.2.4 GeneratorFunction Instances\n25.3 Generator Objects\n25.3.1 Properties of Generator Prototype\n25.3.2 Properties of Generator Instances\n25.3.3 Generator Abstract Operations\n25.4 Promise Objects\n25.4.1 Promise Abstract Operations\n25.4.2 Promise Jobs\n25.4.3 The Promise Constructor\n25.4.4 Properties of the Promise Constructor\n25.4.5 Properties of the Promise Prototype Object\n25.4.6 Properties of Promise Instances\n26 Reflection\n26.1 The Reflect Object\n26.1.1 Reflect.apply ( target, thisArgument, argumentsList )\n26.1.2 Reflect.construct ( target, argumentsList [, newTarget] )\n26.1.3 Reflect.defineProperty ( target, propertyKey, attributes )\n26.1.4 Reflect.deleteProperty ( target, propertyKey )\n26.1.5 Reflect.enumerate ( target )\n26.1.6 Reflect.get ( target, propertyKey [ , receiver ])\n26.1.7 Reflect.getOwnPropertyDescriptor ( target, propertyKey )\n26.1.8 Reflect.getPrototypeOf ( target )\n26.1.9 Reflect.has ( target, propertyKey )\n26.1.10 Reflect.isExtensible (target)\n26.1.11 Reflect.ownKeys ( target )\n26.1.12 Reflect.preventExtensions ( target )\n26.1.13 Reflect.set ( target, propertyKey, V [ , receiver ] )\n26.1.14 Reflect.setPrototypeOf ( target, proto )\n26.2 Proxy Objects\n26.2.1 The Proxy Constructor\n26.2.2 Properties of the Proxy Constructor\n26.3 Module Namespace Objects\n26.3.1 @@toStringTag\n26.3.2 [ @@iterator ] ( )\nAnnex A (informative) Grammar Summary\nA.1 Lexical Grammar\nA.2 Expressions\nA.3 Statements\nA.4 Functions and Classes\nA.5 Scripts and Modules\nA.6 Number Conversions\nA.7 Universal Resource Identifier Character Classes\nA.8 Regular Expressions\nAnnex B (normative) Additional ECMAScript Features for Web Browsers\nB.1 Additional Syntax\nB.1.1 Numeric Literals\nB.1.2 String Literals\nB.1.3 HTML-like Comments\nB.1.4 Regular Expressions Patterns\nB.2 Additional Built-in Properties\nB.2.1 Additional Properties of the Global Object\nB.2.2 Additional Properties of the Object.prototype Object\nB.2.3 Additional Properties of the String.prototype Object\nB.2.4 Additional Properties of the Date.prototype Object\nB.2.5 Additional Properties of the RegExp.prototype Object\nB.3 Other Additional Features\nB.3.1 __proto__ Property Names in Object Initializers\nB.3.2 Labelled Function Declarations\nB.3.3 Block-Level Function Declarations Web Legacy Compatibility Semantics\nB.3.4 FunctionDeclarations in IfStatement Statement Clauses\nB.3.5 VariableStatements in Catch blocks\nAnnex C (informative) The Strict Mode of ECMAScript\nAnnex D (informative) Corrections and Clarifications in ECMAScript 2015 with Possible Compatibility Impact\nAnnex E (informative) Additions and Changes That Introduce Incompatibilities with Prior Editions\nBibliography\n")])])])])}),[],!1,null,null,null);n.default=i.exports}}]);